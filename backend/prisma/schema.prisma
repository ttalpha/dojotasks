// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  projects Project[]
  tasks    Task[]
  comments Comment[]

  avatar Avatar?
}

model Avatar {
  userId Int @id
  fileId Int @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model File {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  mimetype  String
  createdAt DateTime @default(now())

  avatar Avatar?
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  tasks     Task[]
  members   User[]
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model Task {
  id        Int        @id @default(autoincrement())
  title     String
  status    TaskStatus @default(TODO)
  project   Project    @relation(fields: [projectId], references: [id])
  createdAt DateTime   @default(now())
  projectId Int
  assignees User[]
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}
